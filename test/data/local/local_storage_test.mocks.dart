// Mocks generated by Mockito 5.0.7 from annotations
// in chatwoot_client_sdk/test/data/local/local_storage_test.dart.
// Do not manually edit this file.

import 'dart:async' as _i3;

import 'package:chatwoot_client_sdk/data/local/dao/chatwoot_contact_dao.dart'
    as _i5;
import 'package:chatwoot_client_sdk/data/local/dao/chatwoot_conversation_dao.dart'
    as _i2;
import 'package:chatwoot_client_sdk/data/local/dao/chatwoot_messages_dao.dart'
    as _i7;
import 'package:chatwoot_client_sdk/data/local/dao/chatwoot_user_dao.dart'
    as _i10;
import 'package:chatwoot_client_sdk/data/local/entity/chatwoot_contact.dart'
    as _i6;
import 'package:chatwoot_client_sdk/data/local/entity/chatwoot_conversation.dart'
    as _i4;
import 'package:chatwoot_client_sdk/data/local/entity/chatwoot_message.dart'
    as _i8;
import 'package:chatwoot_client_sdk/data/local/entity/chatwoot_user.dart'
    as _i11;
import 'package:flutter_secure_storage/flutter_secure_storage.dart' as _i9;
import 'package:mockito/mockito.dart' as _i1;

// ignore_for_file: comment_references
// ignore_for_file: unnecessary_parenthesis

// ignore_for_file: prefer_const_constructors

// ignore_for_file: avoid_redundant_argument_values

/// A class which mocks [ChatwootConversationDao].
///
/// See the documentation for Mockito's code generation for more information.
class MockChatwootConversationDao extends _i1.Mock
    implements _i2.ChatwootConversationDao {
  MockChatwootConversationDao() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i3.Future<void> saveConversation(_i4.ChatwootConversation? conversation) =>
      (super.noSuchMethod(Invocation.method(#saveConversation, [conversation]),
          returnValue: Future<void>.value(null),
          returnValueForMissingStub: Future.value()) as _i3.Future<void>);
  @override
  _i3.Future<void> deleteConversation() =>
      (super.noSuchMethod(Invocation.method(#deleteConversation, []),
          returnValue: Future<void>.value(null),
          returnValueForMissingStub: Future.value()) as _i3.Future<void>);
  @override
  _i3.Future<void> onDispose() =>
      (super.noSuchMethod(Invocation.method(#onDispose, []),
          returnValue: Future<void>.value(null),
          returnValueForMissingStub: Future.value()) as _i3.Future<void>);
  @override
  _i3.Future<void> clearAll() =>
      (super.noSuchMethod(Invocation.method(#clearAll, []),
          returnValue: Future<void>.value(null),
          returnValueForMissingStub: Future.value()) as _i3.Future<void>);
}

/// A class which mocks [ChatwootContactDao].
///
/// See the documentation for Mockito's code generation for more information.
class MockChatwootContactDao extends _i1.Mock
    implements _i5.ChatwootContactDao {
  MockChatwootContactDao() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i3.Future<void> saveContact(_i6.ChatwootContact? contact) =>
      (super.noSuchMethod(Invocation.method(#saveContact, [contact]),
          returnValue: Future<void>.value(null),
          returnValueForMissingStub: Future.value()) as _i3.Future<void>);
  @override
  _i3.Future<void> deleteContact() =>
      (super.noSuchMethod(Invocation.method(#deleteContact, []),
          returnValue: Future<void>.value(null),
          returnValueForMissingStub: Future.value()) as _i3.Future<void>);
  @override
  _i3.Future<void> onDispose() =>
      (super.noSuchMethod(Invocation.method(#onDispose, []),
          returnValue: Future<void>.value(null),
          returnValueForMissingStub: Future.value()) as _i3.Future<void>);
  @override
  _i3.Future<void> clearAll() =>
      (super.noSuchMethod(Invocation.method(#clearAll, []),
          returnValue: Future<void>.value(null),
          returnValueForMissingStub: Future.value()) as _i3.Future<void>);
}

/// A class which mocks [ChatwootMessagesDao].
///
/// See the documentation for Mockito's code generation for more information.
class MockChatwootMessagesDao extends _i1.Mock
    implements _i7.ChatwootMessagesDao {
  MockChatwootMessagesDao() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i3.Future<void> saveMessage(_i8.ChatwootMessage? message) =>
      (super.noSuchMethod(Invocation.method(#saveMessage, [message]),
          returnValue: Future<void>.value(null),
          returnValueForMissingStub: Future.value()) as _i3.Future<void>);
  @override
  _i3.Future<void> saveAllMessages(List<_i8.ChatwootMessage>? messages) =>
      (super.noSuchMethod(Invocation.method(#saveAllMessages, [messages]),
          returnValue: Future<void>.value(null),
          returnValueForMissingStub: Future.value()) as _i3.Future<void>);
  @override
  _i8.ChatwootMessage? getMessage(String? messageId) =>
      (super.noSuchMethod(Invocation.method(#getMessage, [messageId]))
          as _i8.ChatwootMessage?);
  @override
  List<_i8.ChatwootMessage> getMessages() =>
      (super.noSuchMethod(Invocation.method(#getMessages, []),
          returnValue: <_i8.ChatwootMessage>[]) as List<_i8.ChatwootMessage>);
  @override
  _i3.Future<void> clear() => (super.noSuchMethod(Invocation.method(#clear, []),
      returnValue: Future<void>.value(null),
      returnValueForMissingStub: Future.value()) as _i3.Future<void>);
  @override
  _i3.Future<void> deleteMessage(String? messageId) =>
      (super.noSuchMethod(Invocation.method(#deleteMessage, [messageId]),
          returnValue: Future<void>.value(null),
          returnValueForMissingStub: Future.value()) as _i3.Future<void>);
  @override
  _i3.Future<void> onDispose() =>
      (super.noSuchMethod(Invocation.method(#onDispose, []),
          returnValue: Future<void>.value(null),
          returnValueForMissingStub: Future.value()) as _i3.Future<void>);
  @override
  _i3.Future<void> clearAll() =>
      (super.noSuchMethod(Invocation.method(#clearAll, []),
          returnValue: Future<void>.value(null),
          returnValueForMissingStub: Future.value()) as _i3.Future<void>);
}

/// A class which mocks [PersistedChatwootConversationDao].
///
/// See the documentation for Mockito's code generation for more information.
class MockPersistedChatwootConversationDao extends _i1.Mock
    implements _i2.PersistedChatwootConversationDao {
  MockPersistedChatwootConversationDao() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i3.Future<void> deleteConversation() =>
      (super.noSuchMethod(Invocation.method(#deleteConversation, []),
          returnValue: Future<void>.value(null),
          returnValueForMissingStub: Future.value()) as _i3.Future<void>);
  @override
  _i3.Future<void> saveConversation(_i4.ChatwootConversation? conversation) =>
      (super.noSuchMethod(Invocation.method(#saveConversation, [conversation]),
          returnValue: Future<void>.value(null),
          returnValueForMissingStub: Future.value()) as _i3.Future<void>);
  @override
  _i3.Future<void> onDispose() =>
      (super.noSuchMethod(Invocation.method(#onDispose, []),
          returnValue: Future<void>.value(null),
          returnValueForMissingStub: Future.value()) as _i3.Future<void>);
  @override
  _i3.Future<void> clearAll() =>
      (super.noSuchMethod(Invocation.method(#clearAll, []),
          returnValue: Future<void>.value(null),
          returnValueForMissingStub: Future.value()) as _i3.Future<void>);
}

/// A class which mocks [PersistedChatwootContactDao].
///
/// See the documentation for Mockito's code generation for more information.
class MockPersistedChatwootContactDao extends _i1.Mock
    implements _i5.PersistedChatwootContactDao {
  MockPersistedChatwootContactDao() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i3.Future<void> deleteContact() =>
      (super.noSuchMethod(Invocation.method(#deleteContact, []),
          returnValue: Future<void>.value(null),
          returnValueForMissingStub: Future.value()) as _i3.Future<void>);
  @override
  _i3.Future<void> saveContact(_i6.ChatwootContact? contact) =>
      (super.noSuchMethod(Invocation.method(#saveContact, [contact]),
          returnValue: Future<void>.value(null),
          returnValueForMissingStub: Future.value()) as _i3.Future<void>);
  @override
  _i3.Future<void> onDispose() =>
      (super.noSuchMethod(Invocation.method(#onDispose, []),
          returnValue: Future<void>.value(null),
          returnValueForMissingStub: Future.value()) as _i3.Future<void>);
  @override
  _i3.Future<void> clearAll() =>
      (super.noSuchMethod(Invocation.method(#clearAll, []),
          returnValue: Future<void>.value(null),
          returnValueForMissingStub: Future.value()) as _i3.Future<void>);
}

/// A class which mocks [PersistedChatwootMessagesDao].
///
/// See the documentation for Mockito's code generation for more information.
class MockPersistedChatwootMessagesDao extends _i1.Mock
    implements _i7.PersistedChatwootMessagesDao {
  MockPersistedChatwootMessagesDao() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i3.Future<void> clear() => (super.noSuchMethod(Invocation.method(#clear, []),
      returnValue: Future<void>.value(null),
      returnValueForMissingStub: Future.value()) as _i3.Future<void>);
  @override
  _i3.Future<void> saveMessage(_i8.ChatwootMessage? message) =>
      (super.noSuchMethod(Invocation.method(#saveMessage, [message]),
          returnValue: Future<void>.value(null),
          returnValueForMissingStub: Future.value()) as _i3.Future<void>);
  @override
  _i3.Future<void> saveAllMessages(List<_i8.ChatwootMessage>? messages) =>
      (super.noSuchMethod(Invocation.method(#saveAllMessages, [messages]),
          returnValue: Future<void>.value(null),
          returnValueForMissingStub: Future.value()) as _i3.Future<void>);
  @override
  List<_i8.ChatwootMessage> getMessages() =>
      (super.noSuchMethod(Invocation.method(#getMessages, []),
          returnValue: <_i8.ChatwootMessage>[]) as List<_i8.ChatwootMessage>);
  @override
  _i3.Future<void> onDispose() =>
      (super.noSuchMethod(Invocation.method(#onDispose, []),
          returnValue: Future<void>.value(null),
          returnValueForMissingStub: Future.value()) as _i3.Future<void>);
  @override
  _i3.Future<void> deleteMessage(String? messageId) =>
      (super.noSuchMethod(Invocation.method(#deleteMessage, [messageId]),
          returnValue: Future<void>.value(null),
          returnValueForMissingStub: Future.value()) as _i3.Future<void>);
  @override
  _i8.ChatwootMessage? getMessage(String? messageId) =>
      (super.noSuchMethod(Invocation.method(#getMessage, [messageId]))
          as _i8.ChatwootMessage?);
  @override
  _i3.Future<void> clearAll() =>
      (super.noSuchMethod(Invocation.method(#clearAll, []),
          returnValue: Future<void>.value(null),
          returnValueForMissingStub: Future.value()) as _i3.Future<void>);
}

/// A class which mocks [FlutterSecureStorage].
///
/// See the documentation for Mockito's code generation for more information.
class MockFlutterSecureStorage extends _i1.Mock
    implements _i9.FlutterSecureStorage {
  MockFlutterSecureStorage() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i3.Future<void> write(
          {String? key,
          String? value,
          _i9.IOSOptions? iOptions = _i9.IOSOptions.defaultOptions,
          _i9.AndroidOptions? aOptions,
          _i9.LinuxOptions? lOptions}) =>
      (super.noSuchMethod(
          Invocation.method(#write, [], {
            #key: key,
            #value: value,
            #iOptions: iOptions,
            #aOptions: aOptions,
            #lOptions: lOptions
          }),
          returnValue: Future<void>.value(null),
          returnValueForMissingStub: Future.value()) as _i3.Future<void>);
  @override
  _i3.Future<String?> read(
          {String? key,
          _i9.IOSOptions? iOptions = _i9.IOSOptions.defaultOptions,
          _i9.AndroidOptions? aOptions,
          _i9.LinuxOptions? lOptions}) =>
      (super.noSuchMethod(
          Invocation.method(#read, [], {
            #key: key,
            #iOptions: iOptions,
            #aOptions: aOptions,
            #lOptions: lOptions
          }),
          returnValue: Future<String?>.value('')) as _i3.Future<String?>);
  @override
  _i3.Future<bool> containsKey(
          {String? key,
          _i9.IOSOptions? iOptions = _i9.IOSOptions.defaultOptions,
          _i9.AndroidOptions? aOptions,
          _i9.LinuxOptions? lOptions}) =>
      (super.noSuchMethod(
          Invocation.method(#containsKey, [], {
            #key: key,
            #iOptions: iOptions,
            #aOptions: aOptions,
            #lOptions: lOptions
          }),
          returnValue: Future<bool>.value(false)) as _i3.Future<bool>);
  @override
  _i3.Future<void> delete(
          {String? key,
          _i9.IOSOptions? iOptions = _i9.IOSOptions.defaultOptions,
          _i9.AndroidOptions? aOptions,
          _i9.LinuxOptions? lOptions}) =>
      (super.noSuchMethod(
          Invocation.method(#delete, [], {
            #key: key,
            #iOptions: iOptions,
            #aOptions: aOptions,
            #lOptions: lOptions
          }),
          returnValue: Future<void>.value(null),
          returnValueForMissingStub: Future.value()) as _i3.Future<void>);
  @override
  _i3.Future<Map<String, String>> readAll(
          {_i9.IOSOptions? iOptions = _i9.IOSOptions.defaultOptions,
          _i9.AndroidOptions? aOptions,
          _i9.LinuxOptions? lOptions}) =>
      (super.noSuchMethod(
              Invocation.method(#readAll, [], {
                #iOptions: iOptions,
                #aOptions: aOptions,
                #lOptions: lOptions
              }),
              returnValue:
                  Future<Map<String, String>>.value(<String, String>{}))
          as _i3.Future<Map<String, String>>);
  @override
  _i3.Future<void> deleteAll(
          {_i9.IOSOptions? iOptions = _i9.IOSOptions.defaultOptions,
          _i9.AndroidOptions? aOptions,
          _i9.LinuxOptions? lOptions}) =>
      (super.noSuchMethod(
          Invocation.method(#deleteAll, [],
              {#iOptions: iOptions, #aOptions: aOptions, #lOptions: lOptions}),
          returnValue: Future<void>.value(null),
          returnValueForMissingStub: Future.value()) as _i3.Future<void>);
}

/// A class which mocks [ChatwootUserDao].
///
/// See the documentation for Mockito's code generation for more information.
class MockChatwootUserDao extends _i1.Mock implements _i10.ChatwootUserDao {
  MockChatwootUserDao() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i3.Future<void> saveUser(_i11.ChatwootUser? user) =>
      (super.noSuchMethod(Invocation.method(#saveUser, [user]),
          returnValue: Future<void>.value(null),
          returnValueForMissingStub: Future.value()) as _i3.Future<void>);
  @override
  _i3.Future<void> deleteUser() =>
      (super.noSuchMethod(Invocation.method(#deleteUser, []),
          returnValue: Future<void>.value(null),
          returnValueForMissingStub: Future.value()) as _i3.Future<void>);
  @override
  _i3.Future<void> onDispose() =>
      (super.noSuchMethod(Invocation.method(#onDispose, []),
          returnValue: Future<void>.value(null),
          returnValueForMissingStub: Future.value()) as _i3.Future<void>);
  @override
  _i3.Future<void> clearAll() =>
      (super.noSuchMethod(Invocation.method(#clearAll, []),
          returnValue: Future<void>.value(null),
          returnValueForMissingStub: Future.value()) as _i3.Future<void>);
}

/// A class which mocks [PersistedChatwootUserDao].
///
/// See the documentation for Mockito's code generation for more information.
class MockPersistedChatwootUserDao extends _i1.Mock
    implements _i10.PersistedChatwootUserDao {
  MockPersistedChatwootUserDao() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i3.Future<void> deleteUser() =>
      (super.noSuchMethod(Invocation.method(#deleteUser, []),
          returnValue: Future<void>.value(null),
          returnValueForMissingStub: Future.value()) as _i3.Future<void>);
  @override
  _i3.Future<void> saveUser(_i11.ChatwootUser? user) =>
      (super.noSuchMethod(Invocation.method(#saveUser, [user]),
          returnValue: Future<void>.value(null),
          returnValueForMissingStub: Future.value()) as _i3.Future<void>);
  @override
  _i3.Future<void> onDispose() =>
      (super.noSuchMethod(Invocation.method(#onDispose, []),
          returnValue: Future<void>.value(null),
          returnValueForMissingStub: Future.value()) as _i3.Future<void>);
  @override
  _i3.Future<void> clearAll() =>
      (super.noSuchMethod(Invocation.method(#clearAll, []),
          returnValue: Future<void>.value(null),
          returnValueForMissingStub: Future.value()) as _i3.Future<void>);
}
